class ModelT {
    constructor() { }
}
/**
 * classe pour effectuer des operations simples sur les array : Sort / Find / Filter
 */
export class SortFilterFind {
    constructor(data, typeSort, fieldName, value = "") {
        this.data = [];
        this.oneData = null;
        this.typeSort = "ASC";
        this.fieldName = "";
        this.value = "";
        this.data = data;
        this.typeSort = typeSort;
        this.fieldName = fieldName;
        this.value = value;
    }
    get valueData() {
        return (this.data.length !== 0) ? this.data : this.oneData;
    }
    /**
     * sort : classe par ordre croissant ou decroissant
     * @returns T[] | undefined
     */
    sort() {
        if (!Array.isArray(this.data) || this.data.length === 0) {
            return undefined;
        }
        const sortFactor = this.typeSort === "ASC" ? 1 : -1;
        this.data.sort((a, b) => {
            if (typeof a[this.fieldName] === "string" && typeof b[this.fieldName] === "string") {
                return sortFactor * a[this.fieldName].localeCompare(b[this.fieldName]);
            }
            if (typeof a[this.fieldName] === "number" && typeof b[this.fieldName] === "number") {
                return sortFactor * (a[this.fieldName] - b[this.fieldName]);
            }
            return 0;
        });
        return this;
    }
    /**
     * filter : filtre generique
     * @returns T[] | undefined
     */
    filter() {
        if (!Array.isArray(this.data) || this.data.length === 0) {
            return undefined;
        }
        this.data = this.data.filter((element) => element[this.fieldName] === this.value);
        return this;
    }
    /**
     * find : recupere l'Objet T
     * @returns T | undefined | null
     */
    find() {
        if (!Array.isArray(this.data) || this.data.length === 0) {
            return undefined;
        }
        this.oneData = this.data.find((element) => element[this.fieldName] === this.value) ?? null;
        this.data = [];
        return this;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydC1maWx0ZXItZmluZC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3NvcnQtZmlsdGVyLWZpbmQvc3JjL2xpYi9zb3J0LWZpbHRlci1maW5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sTUFBTTtJQUNSLGdCQUFjLENBQUM7Q0FFbEI7QUFDRDs7R0FFRztBQUVILE1BQU0sT0FBTyxjQUFjO0lBT3pCLFlBQ0UsSUFBYyxFQUNkLFFBQWtCLEVBQ2xCLFNBQWtCLEVBQ2xCLFFBQWtDLEVBQUU7UUFWOUIsU0FBSSxHQUFZLEVBQUUsQ0FBQztRQUNuQixZQUFPLEdBQWMsSUFBSSxDQUFDO1FBQzFCLGFBQVEsR0FBWSxLQUFLLENBQUM7UUFDMUIsY0FBUyxHQUFhLEVBQWEsQ0FBQztRQUNwQyxVQUFLLEdBQStCLEVBQUUsQ0FBQztRQVE3QyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztRQUNqQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUN2QixDQUFDO0lBRUMsSUFBSSxTQUFTO1FBQ1QsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFJLENBQUMsQ0FBQyxDQUFBLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFFO0lBQzlELENBQUM7SUFDRDs7O09BR0c7SUFDSCxJQUFJO1FBRUYsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRSxDQUFDO1lBQ3RELE9BQU8sU0FBUyxDQUFDO1FBQ25CLENBQUM7UUFFRCxNQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsUUFBUSxLQUFLLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVwRCxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtZQUN0QixJQUFJLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxRQUFRLElBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFFBQVEsRUFBRSxDQUFDO2dCQUNuRixPQUFPLFVBQVUsR0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBWSxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBVyxDQUFDLENBQUM7WUFDL0YsQ0FBQztZQUVELElBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLFFBQVEsSUFBSSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssUUFBUSxFQUFFLENBQUM7Z0JBQ25GLE9BQU8sVUFBVSxHQUFHLENBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQVksR0FBSSxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBWSxDQUFDLENBQUM7WUFDdEYsQ0FBQztZQUVELE9BQU8sQ0FBQyxDQUFDO1FBQ1gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTTtRQUVKLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsQ0FBQztZQUN0RCxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDO1FBQ0QsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEYsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNEOzs7T0FHRztJQUNILElBQUk7UUFDRixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFLENBQUM7WUFDdEQsT0FBTyxTQUFTLENBQUM7UUFDbkIsQ0FBQztRQUNELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLEVBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQztRQUMxRixJQUFJLENBQUMsSUFBSSxHQUFDLEVBQUUsQ0FBQztRQUNiLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbInR5cGUgc29ydFR5cGUgPVwiQVNDXCJ8IFwiREVTQ1wiO1xyXG5jbGFzcyBNb2RlbFR7XHJcbiAgICBjb25zdHJ1Y3Rvcigpe31cclxuICAgIFtrZXk6IHN0cmluZ106IHVua25vd25cclxufVxyXG4vKipcclxuICogY2xhc3NlIHBvdXIgZWZmZWN0dWVyIGRlcyBvcGVyYXRpb25zIHNpbXBsZXMgc3VyIGxlcyBhcnJheSA6IFNvcnQgLyBGaW5kIC8gRmlsdGVyXHJcbiAqL1xyXG5cclxuZXhwb3J0IGNsYXNzIFNvcnRGaWx0ZXJGaW5kPFQgZXh0ZW5kcyBNb2RlbFQ+IHtcclxuICBwcml2YXRlIGRhdGEgOiBBcnJheTxUPj1bXTtcclxuICBwcml2YXRlIG9uZURhdGEgOiBUIHwgbnVsbCA9IG51bGw7XHJcbiAgcHJpdmF0ZSB0eXBlU29ydCA6IHNvcnRUeXBlPVwiQVNDXCI7XHJcbiAgcHJpdmF0ZSBmaWVsZE5hbWUgOiBrZXlvZiBUID0gXCJcIiBhcyBrZXlvZiBUO1xyXG4gIHByaXZhdGUgdmFsdWUgOiAgc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbiA9XCJcIjtcclxuICBcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIGRhdGE6IEFycmF5PFQ+LFxyXG4gICAgdHlwZVNvcnQ6IHNvcnRUeXBlLFxyXG4gICAgZmllbGROYW1lOiBrZXlvZiBULFxyXG4gICAgdmFsdWU6IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW4gPVwiXCJcclxuKSB7XHJcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgdGhpcy50eXBlU29ydCA9IHR5cGVTb3J0O1xyXG4gICAgdGhpcy5maWVsZE5hbWUgPSBmaWVsZE5hbWU7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbn1cclxuXHJcbiAgZ2V0IHZhbHVlRGF0YSgpIDogVCB8IFRbXSB8IG51bGx7XHJcbiAgICAgIHJldHVybiAodGhpcy5kYXRhLmxlbmd0aCAhPT0wKT8gdGhpcy5kYXRhIDogdGhpcy5vbmVEYXRhIDsgXHJcbiAgfVxyXG4gIC8qKlxyXG4gICAqIHNvcnQgOiBjbGFzc2UgcGFyIG9yZHJlIGNyb2lzc2FudCBvdSBkZWNyb2lzc2FudFxyXG4gICAqIEByZXR1cm5zIFRbXSB8IHVuZGVmaW5lZFxyXG4gICAqL1xyXG4gIHNvcnQoKSA6IHRoaXMgfCB1bmRlZmluZWR7IFxyXG5cclxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLmRhdGEpIHx8IHRoaXMuZGF0YS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkOyBcclxuICAgICAgfVxyXG4gIFxyXG4gICAgICBjb25zdCBzb3J0RmFjdG9yID0gdGhpcy50eXBlU29ydCA9PT0gXCJBU0NcIiA/IDEgOiAtMTtcclxuICBcclxuICAgICAgdGhpcy5kYXRhLnNvcnQoKGEsIGIpID0+IHtcclxuICAgICAgICBpZiAodHlwZW9mIGFbdGhpcy5maWVsZE5hbWVdID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBiW3RoaXMuZmllbGROYW1lXSA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgcmV0dXJuIHNvcnRGYWN0b3IgKiAoYVt0aGlzLmZpZWxkTmFtZV0gYXMgc3RyaW5nKS5sb2NhbGVDb21wYXJlKGJbdGhpcy5maWVsZE5hbWVdIGFzIHN0cmluZyk7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIGlmICh0eXBlb2YgYVt0aGlzLmZpZWxkTmFtZV0gPT09IFwibnVtYmVyXCIgJiYgdHlwZW9mIGJbdGhpcy5maWVsZE5hbWVdID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICByZXR1cm4gc29ydEZhY3RvciAqICgoYVt0aGlzLmZpZWxkTmFtZV0gYXMgbnVtYmVyKSAtIChiW3RoaXMuZmllbGROYW1lXSBhcyBudW1iZXIpKTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgIH0pO1xyXG4gIFxyXG4gICAgICByZXR1cm4gdGhpcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIGZpbHRlciA6IGZpbHRyZSBnZW5lcmlxdWVcclxuICAgKiBAcmV0dXJucyBUW10gfCB1bmRlZmluZWRcclxuICAgKi9cclxuICBmaWx0ZXIoKSA6IHRoaXMgfCB1bmRlZmluZWRcclxuICB7XHJcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodGhpcy5kYXRhKSB8fCB0aGlzLmRhdGEubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuZmlsdGVyKChlbGVtZW50KSA9PiBlbGVtZW50W3RoaXMuZmllbGROYW1lXSA9PT0gdGhpcy52YWx1ZSk7XHJcbiAgICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuICAvKipcclxuICAgKiBmaW5kIDogcmVjdXBlcmUgbCdPYmpldCBUXHJcbiAgICogQHJldHVybnMgVCB8IHVuZGVmaW5lZCB8IG51bGxcclxuICAgKi9cclxuICBmaW5kKCkgOiB0aGlzIHwgdW5kZWZpbmVke1xyXG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHRoaXMuZGF0YSkgfHwgdGhpcy5kYXRhLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5vbmVEYXRhID0gdGhpcy5kYXRhLmZpbmQoKGVsZW1lbnQpPT4gZWxlbWVudFt0aGlzLmZpZWxkTmFtZV0gPT09IHRoaXMudmFsdWUpID8/IG51bGw7XHJcbiAgICAgIHRoaXMuZGF0YT1bXTtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxufSJdfQ==